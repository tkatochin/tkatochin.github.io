　Javaでいうところの、Class<T> 相当のものが欲しい。制約条件をこんな感じで拡張してもらいたい。
>|cs|
    T loadXml<T, TT>(TT type)
        where TT: typeof(T)
||<
***追記
　↑は全然的外れで、制約条件にするどころかそもそもTTなんて引数が要らないことが分かりました。理解に至ったのは、System.Activator.CreateInstance<T>()がキッカケです。型引数しか渡してないのに何故インスタンス生成できるの！？ということは！…と。
型引数が実引数並みのパワーを持つC#ではJavaでの小細工など不要だったということです。そういうわけで7/6に書いたloadXmlメソッドは以下のように書けます。
>|cs|
        private T loadXml<T>()
        {
            XmlSerializerFactory factory = new XmlSerializerFactory();
            XmlSerializer serializer = factory.CreateSerializer(typeof(T));
            T result = default(T);
            string fileName = System.Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            using (FileStream stream = File.Open(fileName + "\\SerializeTest_" + typeof(T).FullName + ".xml", FileMode.Open))
            {
                result = (T)serializer.Deserialize(stream);
                stream.Close();
            }
            return result;
        }
||<
　<del datetime="2008-07-25T11:18:40+09:00">「where T: class」が必要なのは非ヌル型(struct）が渡されると null代入はできないためです（コンパイラが教えてくれます）。</del>((NyaRuRuさんのコメントに従い書き換えたのでwhere T: classはなくなりました。))
　この次のトピック([C#] XMLのネストでけた)で書いている呼び出しは、以下のように置き換えられます。超スッキリ！
>|cs|
ClassAttributes maps = loadXml(typeof(ClassAttributes)) as ClassAttributes;
　　　↓
ClassAttributes maps = loadXml<ClassAttributes>();
||<
　コメントをいただいたNyaRuRuさんに感謝です。ありがとうございました。
