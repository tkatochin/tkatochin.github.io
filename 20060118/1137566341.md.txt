---
Title: ' genericsの型情報'
Category:
- Java
Date: 2006-01-18T15:39:01+09:00
URL: http://tkatochin.hatenablog.com/entry/20060118/1137566341
EditURL: https://blog.hatena.ne.jp/t-katochin/tkatochin.hatenablog.com/atom/entry/6653586347154756116
---

　パラメータ付きでインスタンス生成したオブジェクトに対してパラメータ型に何を渡されたかリフレクションで知ることができるかを調査しました。結果をメモしておきます。まさたかさんの初期ikushipeコードが参考になりました。ありがとうございます。さいしょはParameterizedType, TypeVariable, getTypeParameters() がそれぞれ何をしめすか分かりませんでしたので、まずこれを整理しておきます。
　以下は値型だけStringに固定したHashMapクラスの例です。
>|java|
class MyStringMap<K> extends HashMap<K, String> {}
                 ~~~＼       ~~~~~~~~~~~~~~~~~~＼
                getTypeParameters()           getGenericSuperClass()
                    ＼                             ＼
                   KはTypeVariable型      この場合、instanceof ParameterizedType となる。
||<

　ParameterizedTypeでgetGenericSuperClass()をキャストしてgetActualTypeArguments()を呼び出すと、
>|
TypeVariable: K
Class: java.lang.String
|<
の順に返ります。getTypeParameters()でも getActualTypeArguments()でも、格納される型は、TypeVariableか、Classか、ParameterizedTypeのどれかとなります。getActualTypeArguments()で、ParameterizedTypeが返る例としては以下のような場合があります。
>|java|
class ListMapThreadLocal extends ThreadLocal<Map<String, List>> {}
                                             ~~~~~~~~~~~~~~~~~＼
                                                           ここがParameterizedType型

ParameterizedType: Map<String, List>
||<

　では次の例を見てみます。
>|java|
    HashMap<Integer, String> map = new HashMap<Integer, String>();
    for (Type type: map.getClass().getTypeParameters()) {
        System.out.println(type.getClass().getSimpleName() + ": " + type);
    }
||<
Integer型、String型が判定できることを期待したかったのですが、そうなりません。
>|
<s>Class: Integer</s>
<s>Class: String</s>
        ↓
TypeVariable: K
TypeVariable: V
|<
Genericsの型情報は、クラスやインターフェースで extends あるいは implements したものは実存する型として.classに残りますが、普通の使い方ではコンパイル時のチェックを堅くすることをして内部的にキャストしてバイトコードに吐き出すだけですので、実行時には消えてしまうためです。
